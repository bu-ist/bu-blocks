{"version":3,"file":"block-support.js","mappings":"YAOA,MAAM,OAAEA,GAAWC,GAAGC,MAChB,aAAEC,GAAiBF,GAAGG,OACtB,eAAEC,GAAmBJ,GAAGK,SACxB,cAAEC,GAAkBN,GAAGO,OAiE7BH,EAAgB,uBAAwB,CACvCI,OAzDwBC,KAExB,GAAKP,EAAc,wCAAwC,GAC1D,OAAO,KAIR,MAAMQ,EAAYR,EAAc,kCAAmC,CAClE,OACA,SAIKS,EAAkBZ,EAAQ,eAAgBa,qBAGhD,GAAKF,EAAUG,SAAUF,GACxB,OAAO,KAQR,MAAMG,EAAWZ,EAAc,+BAAgC,CAC9D,kBACA,yBACA,eACA,YACA,wBACA,mBACA,qBACA,2BACA,YACA,qBACA,kBACA,uBACA,eACA,2BACA,aAGKa,EAAmBT,IAAgBU,KAAOC,GAAUA,EAAKC,OAU/D,OAPAJ,EAASK,SAAWC,IACdL,EAAiBF,SAAUO,IAC/BpB,GAAGO,OAAOc,oBAAqBD,EAChC,IAIM,IAAI,G","sources":["webpack://bu-blocks/./src/block-support.js"],"sourcesContent":["/**\n * Handles block support for post types.\n *\n * @link   http://www.bu.edu/interactive-design/\n * @author Boston University: Interactive Design <id@bu.edu>\n */\n\nconst { select } = wp.data;\nconst { applyFilters } = wp.hooks;\nconst { registerPlugin } = wp.plugins;\nconst { getBlockTypes } = wp.blocks;\n\n/**\n * Disables support for the blocks in this plugin for all but the `post` and `page` post types.\n *\n * Runs once the dom is loaded in order to avoid a race condition.\n *\n * @return {null} Nothing to return\n */\nconst UnregisterBlocks = () => {\n\t// Bail if the default support has been filtered off.\n\tif ( applyFilters( 'buBlocks.blockSupport.disableDefault', false ) ) {\n\t\treturn null;\n\t}\n\n\t// Create a filterable array of post types to restrict the blocks to.\n\tconst postTypes = applyFilters( 'buBlocks.blockSupport.postTypes', [\n\t\t'post',\n\t\t'page',\n\t] );\n\n\t// Get the current post type.\n\tconst currentPostType = select( 'core/editor' ).getCurrentPostType();\n\n\t// Bail if the current post type is in the array of post types to restrict the blocks to.\n\tif ( postTypes.includes( currentPostType ) ) {\n\t\treturn null;\n\t}\n\n\t// A filterable list of the blocks registered by this plugin.\n\t// Alternatively, a setting added to each block could be used\n\t// to filter the list of all blocks. For example:\n\t// const blocks = select( 'core/blocks' ).getBlockTypes();\n\t// const buBlocks = blocks.filter( block => block.plugin === 'bu-blocks' );\n\tconst buBlocks = applyFilters( 'buBlocks.blockSupport.blocks', [\n\t\t'editorial/aside',\n\t\t'editorial-preset/aside',\n\t\t'bu/buniverse',\n\t\t'bu/button',\n\t\t'editorial/custom-html',\n\t\t'editorial/drawer',\n\t\t'editorial/headline',\n\t\t'editorial/introparagraph',\n\t\t'bu/leadin',\n\t\t'editorial/listicle',\n\t\t'editorial/modal',\n\t\t'editorial/photoessay',\n\t\t'bu/pullquote',\n\t\t'editorial/relatedstories',\n\t\t'bu/stats',\n\t] );\n\n\tconst registeredBlocks = getBlockTypes().map( ( item ) => item.name );\n\n\t// Unregister the blocks.\n\tbuBlocks.forEach( ( block ) => {\n\t\tif ( registeredBlocks.includes( block ) ) {\n\t\t\twp.blocks.unregisterBlockType( block );\n\t\t}\n\t} );\n\n\t// Return null to avoid rendering anything.\n\treturn null;\n};\n\nregisterPlugin( 'unregister-bu-blocks', {\n\trender: UnregisterBlocks,\n} );\n"],"names":["select","wp","data","applyFilters","hooks","registerPlugin","plugins","getBlockTypes","blocks","render","UnregisterBlocks","postTypes","currentPostType","getCurrentPostType","includes","buBlocks","registeredBlocks","map","item","name","forEach","block","unregisterBlockType"],"sourceRoot":""}