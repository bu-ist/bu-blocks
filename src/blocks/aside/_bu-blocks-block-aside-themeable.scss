// =================================================================
// aside Styles - Configurable
// =================================================================
//
//
// Styles in this file should only be using properties that are
// in the global array ($blocks-defaults) so they can be overwritten by
// the child theme
// Examples: color, border-color, font-family
//
// Variant styles, such as "open", or an alternate layout should be declared here
// as shown below IF that variant needs to modify one of the properties that
// can be overwritten via the array. This lets the child theme overwrite that
// as well.
//
// If you aren't using styles from the global array ($blocks-defaults) by
// using blocks-get() it doesn't belong in this file as it will be printed
// in the stylesheet multiple times (for each publication)
//

$blocks-block-aside-config: ();

// use the above array if you need to override the global $blocks-defaults array
// of styles ONLY for this block IN the plugin.
// You can then override THIS array by using $blocks-block-aside-theme in the child theme to
// override this array
//
// Remember, with great power comes great responsibility. This should not be used unless
// you really need it. Think carefully about why you aren't modifying the global config by adding
// a different variable.
//
// $blocks-block-aside-config: (
// 		primary-color:red,
// 		secondary-color: rebeccapurple,
// );


// Use the default Blocks configuration. You can override this globally
// in a theme.

$blocks-block-aside-config: map-merge( $blocks-block-aside-config, $blocks-config );

// This allows themes to optionally set theme options for this
// block only. You can set all or a few options - only the options
// you set in $block-block-aside-theme will override the defaults.

@if variable-exists( blocks-block-aside-theme ) {
	$blocks-block-aside-config: map_merge( $blocks-block-aside-config, $blocks-block-aside-theme );
}

// A global helper variable for the block-get mixin.

$current-map: $blocks-block-aside-config;


$scope: blocks-get( 'scope' );

.#{$scope}-block-aside {
	font-family: blocks-get( 'font-primary');

	h2 {
		font-family: blocks-get( 'font-primary');
	}

	p {
		font-family: blocks-get( 'font-secondary');
		color: blocks-get( 'color-aside-type' );
	}

	.call-to-action {
		color: blocks-get( 'color-link' );
		font-family: blocks-get( 'font-tertiary');

		&::before {
			color: blocks-get( 'color-primary' );
		}
	}

	&.has-light-background {
		background: blocks-get( 'background-light' );
	}

	&.has-dark-background {
		background: blocks-get( 'background-dark' );

		p {
			color: blocks-get( 'color-aside-type-lighter' );
		}
	}

	&.has-primary-background {
		background: blocks-get( 'color-primary' );

		.call-to-action,
		p {
			color: blocks-get( 'color-aside-type-lighter' );
		}

		.call-to-action {
			&::before {
				color: blocks-get( 'color-link' );
			}
		}
	}
}

