// The final Blocks configuration map.
// Controls all defaults, and can either be modified
// via a $blocks-config-theme map, or overridden
// altogether by defining your own $blocks-config
// in your custom theme. This can be useful if you
// need to redeclare or regenerate multiple themes
// for a single Blocks element in the same stylesheet.

$blocks-config: ();

// Defaults for $blocks-config. Overrideable by themes.
// Set to null for if plugin should inherit from Responsive Framework Stylesheet
// If set to null that property won't be output until overridden in child theme or block override

$blocks-defaults: (
	scope: 							wp,

	color-primary: 					null,
	color-primary-text: 			null,
	color-secondary: 				null,
	color-secondary-text: 			null,
	color-tertiary: 				null,
	color-tertiary-text: 			null,
	color-quaternary: 				null,
	color-quaternary-text: 			null,
	color-quinary: 					null,
	color-quinary-text: 			null,

	font-family-primary: 			null,
	font-family-secondary: 		 	null,
	font-family-tertiary: 			null,

	font-color-base: 				null,
	font-color-heading: 			null,
	font-color-heading-small: 		null,
	font-color-link: 				null,
	font-color-link-active: 		null,
	font-color-link-visited: 		null,
);

// Merge defaults with the final map.

$blocks-config: map-merge( $blocks-defaults, $blocks-config );

// Allow themes to override defaults.

@if variable-exists( blocks-config-theme ) {
	$blocks-config: map_merge( $blocks-config, $blocks-config-theme );
}

